# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Publish

on:
  push:
    branches:
      - master

jobs:
  release:
    name: Release
    strategy:
      matrix:
        kind: ['windows']
        include:
          - kind: windows
            os: windows-latest
            target: win-x64
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Git Tag
      shell: bash
      run: |
        # Get the last tag on the current branch
        git fetch --tags
        
        git status
        LAST_TAG=$(git describe --tags --abbrev=0)

        # If no tag exists, start from an initial version
        if [ -z "$LAST_TAG" ]; then
        LAST_TAG="1.0.0"
        fi

        # Extract the major, minor, and patch parts (assuming format X.Y.Z)
        IFS='.' read -r -a VERSION_PARTS <<< "$LAST_TAG"

        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        # Increment the patch version
        NEW_PATCH=$((PATCH + 1))

        # Create the new tag (X.Y.Z+1)
        NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"

        # Create the new tag in Git
        git tag "$NEW_TAG"

        # Push the new tag to the remote (if needed)
        # git push origin "$NEW_TAG"

        echo "Created new tag: $NEW_TAG"
    - name: Publish
      shell: bash
      run: |
          # Define some variables for things we need
          tag=$(git describe --tags --abbrev=0)
          appName="Shumozavr.REW.Automator.API"
          release_name="$appName-$tag-${{ matrix.target }}"

          # Build everything
          dotnet publish $appName -o "$release_name"

          # Pack files
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            7z a -tzip "${release_name}.zip" "./${release_name}/*"
          else
            tar czvf "${release_name}.tar.gz" "$release_name"
          fi

          # Delete output directory
          rm -r "$release_name"
    - name: Create Release
      uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: "*.gz,*.zip"
        allowUpdates: true
